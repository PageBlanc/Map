{
  "version": 3,
  "sources": ["../../three/src/renderers/common/DataMap.js", "../../three/src/renderers/common/Color4.js", "../../three/src/renderers/common/Background.js"],
  "sourcesContent": ["class DataMap {\n\n\tconstructor() {\n\n\t\tthis.data = new WeakMap();\n\n\t}\n\n\tget( object ) {\n\n\t\tlet map = this.data.get( object );\n\n\t\tif ( map === undefined ) {\n\n\t\t\tmap = {};\n\t\t\tthis.data.set( object, map );\n\n\t\t}\n\n\t\treturn map;\n\n\t}\n\n\tdelete( object ) {\n\n\t\tlet map;\n\n\t\tif ( this.data.has( object ) ) {\n\n\t\t\tmap = this.data.get( object );\n\n\t\t\tthis.data.delete( object );\n\n\t\t}\n\n\t\treturn map;\n\n\t}\n\n\thas( object ) {\n\n\t\treturn this.data.has( object );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.data = new WeakMap();\n\n\t}\n\n}\n\nexport default DataMap;\n", "import { Color } from '../../math/Color.js';\n\nclass Color4 extends Color {\n\n\tconstructor( r, g, b, a = 1 ) {\n\n\t\tsuper( r, g, b );\n\n\t\tthis.a = a;\n\n\t}\n\n\tset( r, g, b, a = 1 ) {\n\n\t\tthis.a = a;\n\n\t\treturn super.set( r, g, b );\n\n\t}\n\n\tcopy( color ) {\n\n\t\tif ( color.a !== undefined ) this.a = color.a;\n\n\t\treturn super.copy( color );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.r, this.g, this.b, this.a );\n\n\t}\n\n}\n\nexport default Color4;\n", "import DataMap from './DataMap.js';\nimport Color4 from './Color4.js';\nimport { vec4, context, normalWorld, backgroundBlurriness, backgroundIntensity, NodeMaterial, modelViewProjection } from '../../nodes/Nodes.js';\n\nimport { Mesh } from '../../objects/Mesh.js';\nimport { SphereGeometry } from '../../geometries/SphereGeometry.js';\nimport { BackSide, LinearSRGBColorSpace } from '../../constants.js';\n\nconst _clearColor = /*@__PURE__*/ new Color4();\n\nclass Background extends DataMap {\n\n\tconstructor( renderer, nodes ) {\n\n\t\tsuper();\n\n\t\tthis.renderer = renderer;\n\t\tthis.nodes = nodes;\n\n\t}\n\n\tupdate( scene, renderList, renderContext ) {\n\n\t\tconst renderer = this.renderer;\n\t\tconst background = this.nodes.getBackgroundNode( scene ) || scene.background;\n\n\t\tlet forceClear = false;\n\n\t\tif ( background === null ) {\n\n\t\t\t// no background settings, use clear color configuration from the renderer\n\n\t\t\trenderer._clearColor.getRGB( _clearColor, LinearSRGBColorSpace );\n\t\t\t_clearColor.a = renderer._clearColor.a;\n\n\t\t} else if ( background.isColor === true ) {\n\n\t\t\t// background is an opaque color\n\n\t\t\tbackground.getRGB( _clearColor, LinearSRGBColorSpace );\n\t\t\t_clearColor.a = 1;\n\n\t\t\tforceClear = true;\n\n\t\t} else if ( background.isNode === true ) {\n\n\t\t\tconst sceneData = this.get( scene );\n\t\t\tconst backgroundNode = background;\n\n\t\t\t_clearColor.copy( renderer._clearColor );\n\n\t\t\tlet backgroundMesh = sceneData.backgroundMesh;\n\n\t\t\tif ( backgroundMesh === undefined ) {\n\n\t\t\t\tconst backgroundMeshNode = context( vec4( backgroundNode ).mul( backgroundIntensity ), {\n\t\t\t\t\t// @TODO: Add Texture2D support using node context\n\t\t\t\t\tgetUV: () => normalWorld,\n\t\t\t\t\tgetTextureLevel: () => backgroundBlurriness\n\t\t\t\t} );\n\n\t\t\t\tlet viewProj = modelViewProjection();\n\t\t\t\tviewProj = viewProj.setZ( viewProj.w );\n\n\t\t\t\tconst nodeMaterial = new NodeMaterial();\n\t\t\t\tnodeMaterial.name = 'Background.material';\n\t\t\t\tnodeMaterial.side = BackSide;\n\t\t\t\tnodeMaterial.depthTest = false;\n\t\t\t\tnodeMaterial.depthWrite = false;\n\t\t\t\tnodeMaterial.fog = false;\n\t\t\t\tnodeMaterial.lights = false;\n\t\t\t\tnodeMaterial.vertexNode = viewProj;\n\t\t\t\tnodeMaterial.colorNode = backgroundMeshNode;\n\n\t\t\t\tsceneData.backgroundMeshNode = backgroundMeshNode;\n\t\t\t\tsceneData.backgroundMesh = backgroundMesh = new Mesh( new SphereGeometry( 1, 32, 32 ), nodeMaterial );\n\t\t\t\tbackgroundMesh.frustumCulled = false;\n\t\t\t\tbackgroundMesh.name = 'Background.mesh';\n\n\t\t\t\tbackgroundMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tconst backgroundCacheKey = backgroundNode.getCacheKey();\n\n\t\t\tif ( sceneData.backgroundCacheKey !== backgroundCacheKey ) {\n\n\t\t\t\tsceneData.backgroundMeshNode.node = vec4( backgroundNode ).mul( backgroundIntensity );\n\n\t\t\t\tbackgroundMesh.material.needsUpdate = true;\n\n\t\t\t\tsceneData.backgroundCacheKey = backgroundCacheKey;\n\n\t\t\t}\n\n\t\t\trenderList.unshift( backgroundMesh, backgroundMesh.geometry, backgroundMesh.material, 0, 0, null );\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Renderer: Unsupported background configuration.', background );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( renderer.autoClear === true || forceClear === true ) {\n\n\t\t\t_clearColor.multiplyScalar( _clearColor.a );\n\n\t\t\tconst clearColorValue = renderContext.clearColorValue;\n\n\t\t\tclearColorValue.r = _clearColor.r;\n\t\t\tclearColorValue.g = _clearColor.g;\n\t\t\tclearColorValue.b = _clearColor.b;\n\t\t\tclearColorValue.a = _clearColor.a;\n\n\t\t\trenderContext.depthClearValue = renderer._clearDepth;\n\t\t\trenderContext.stencilClearValue = renderer._clearStencil;\n\n\t\t\trenderContext.clearColor = renderer.autoClearColor === true;\n\t\t\trenderContext.clearDepth = renderer.autoClearDepth === true;\n\t\t\trenderContext.clearStencil = renderer.autoClearStencil === true;\n\n\t\t} else {\n\n\t\t\trenderContext.clearColor = false;\n\t\t\trenderContext.clearDepth = false;\n\t\t\trenderContext.clearStencil = false;\n\n\t\t}\n\n\t}\n\n}\n\nexport default Background;\n"],
  "mappings": "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",
  "names": ["renderer", "scene"]
}
